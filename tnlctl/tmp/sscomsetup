#!/bin/bash
#
#Revision:2018110402
#

export PATH=/sbin:${PATH}

PROG_NAME=sscomsetup

USB_PORT=${1:-USB0}

INPUT=/tmp/${PROG_NAME}-input.$$
OUTPUT=/tmp/${PROG_NAME}-output.$$

# trap and delete temp files
trap "rm $OUTPUT; rm $INPUT; exit" SIGHUP SIGINT SIGTERM

#
# declare associative array for menu - speed, parity bits, data bits, stopbits
#
# speed
declare -A COM_SPEED=( [1]="9600" [2]="38400" [3]="115200" \
    [4]="19200" [5]="57600" [6]="4800" [7]="2400" [8]="1200" [9]="300" \
    [A]="230400" [B]="460800" [C]="500000" [D]="576000" [E]="921600" \
    [F]="1000000" [G]="1152000" [H]="1500000" [I]="2000000" \
    [J]="2500000" [K]="3000000" [L]="3500000" [M]="4000000"
)

MENUITEMS_SPEED=()
for k in ${!COM_SPEED[@]}
do
    MENUITEMS_SPEED+=("${k}" "${COM_SPEED[${k}]}")
done

MENUITEMS_PARITY=( "N" "None parity" "E" "Even parity" "O" "Odd parity" "M" "Mark parity" "S" "Space parity" )

MENUITEMS_DATA=( "8" "8 data bits" "7" "7 data bits" "6" "6 data bits" "5" "5 data bits" )

MENUITEMS_STOPBITS=( "1" "1 stopbits" "2" "2 stopbits" )

#
# Purpose - display output using msgbox
#  $1 -> set msgbox height
#  $2 -> set msgbox width
#  $3 -> set msgbox title
#
function display_output(){
    local h=${1-10}        # box height default 10
    local w=${2-41}        # box width default 41
    local t=${3-Output}    # box title
    dialog --backtitle "SS Menu Output" --title "${t}" --clear --msgbox "$(<$OUTPUT)" ${h} ${w}
}
#
# Purpose - display a system info
#
function show_usbinfo(){
    ls -l /dev/ttyUSB* > $OUTPUT
    display_output 20 80 "USB Ports Info"
}
#
# set infinite loop
#
#while true
#do

    ### display speed menu ###
    dialog --clear  --help-button --backtitle "MCSC SS USB Port Setup (${USB_PORT})" \
    --timeout 300 \
    --title "[ USB Port Setup (${USB_PORT})]" \
    --menu "Choose a speed" 20 50 12 \
           "${MENUITEMS_SPEED[@]}" \
           2>"${INPUT}"

    _status=$?
    if [ ${_status} -eq 255 ]
    then
        # got dialog timeout
        exit 0
    fi

    menuitem=$(<"${INPUT}")
    chosen_speed=${COM_SPEED[${menuitem}]}

    ### display parity menu ###
    dialog --clear  --help-button --backtitle "MCSC SS USB Port Setup (${USB_PORT})" \
    --timeout 300 \
    --title "[ USB Port Setup (${USB_PORT})]" \
    --menu "Choose a parity" 20 50 12 \
           "${MENUITEMS_PARITY[@]}" \
           2>"${INPUT}"

    _status=$?
    if [ ${_status} -eq 255 ]
    then
        # got dialog timeout
        exit 0
    fi

    menuitem=$(<"${INPUT}")
    chosen_parity=${menuitem}

    ### display data bits menu ###
    dialog --clear  --help-button --backtitle "MCSC SS USB Port Setup (${USB_PORT})" \
    --timeout 300 \
    --title "[ USB Port Setup (${USB_PORT})]" \
    --menu "Choose a data bits" 20 50 12 \
           "${MENUITEMS_DATA[@]}" \
           2>"${INPUT}"

    _status=$?
    if [ ${_status} -eq 255 ]
    then
        # got dialog timeout
        exit 0
    fi

    menuitem=$(<"${INPUT}")
    chosen_data=${menuitem}

    ### display data bits menu ###
    dialog --clear  --help-button --backtitle "MCSC SS USB Port Setup (${USB_PORT})" \
    --timeout 300 \
    --title "[ USB Port Setup (${USB_PORT})]" \
    --menu "Choose a stopbits" 20 50 12 \
           "${MENUITEMS_STOPBITS[@]}" \
           2>"${INPUT}"

    _status=$?
    if [ ${_status} -eq 255 ]
    then
        # got dialog timeout
        exit 0
    fi

    menuitem=$(<"${INPUT}")
    chosen_stopbits=${menuitem}

    cat <<EOF > ${OUTPUT}
port=/dev/tty${USB_PORT}
speed=${chosen_speed}
data bits=${chosen_data}
parity=${chosen_parity}
stopbits=${chosen_stopbits}
EOF
#(marked) rtscts           No

    display_output 20 80 "Result of USB Port Setup"

    # write to config (~ssuser/.minirc.${USB_PORT})
    cat <<EOF > ~ssuser/.minirc.${USB_PORT}
pu port             /dev/tty${USB_PORT}
pu baudrate         ${chosen_speed}
pu bits             ${chosen_data}
pu parity           ${chosen_parity}
pu stopbits         ${chosen_stopbits}
pu rtscts           No
EOF
#done

# if temp files found, delete em
[ -f $OUTPUT ] && rm $OUTPUT
[ -f $INPUT ] && rm $INPUT

